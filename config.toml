# app configuration keys segregated by section
[api]
name = "Bybit"

# current apis working with the app
[api.Bybit]
base_url = "https://api.bybit.com"
transaction_log_endpoint = "/v5/account/transaction-log"
execution_list_endpoint = "/v5/execution/list"
realtime_order_endpoint = "v5/order/realtime"
order_history_endpoint = "/v5/order/history"

# journal app to generate the journal to
[journal_app]
name = "Obsidian"

# current journal apps working with the app
[journal_app.Obsidian]
name = "{timeframe} Trade Recap - {date} {pnl}.md"
# set the order on how the content should be displayed in your journal
display_order = ["links", "charts", "tables"]
# set this as an empty dict if you don't want your journal to be linked
links = {win = "Trading/Reports/Wins", loss = "Trading/Reports/Losses"}
# the value to be used when performing computations related to trade risk management
# defaulted to 2%
risk_threshold = 0.02
# whether high levels stats like pnl, win ratio, profit factor, etc should be based on "Realized Profit"s or
# "Gross Profit"s. If any other value is provided (including empty) will default to "Realized Profit"
compute_profits_by = "Realized Profit"
# supported style outputs: markdown; markdown+css; html+css
output_style = "markdown"
# available write_modes: 'overwrite' and 'append'
write_mode = "overwrite"
# css classes to apply to the template (they should already bet set in your Obsidian's snippets)
# bypassed if a style without css has been chosen
css_classes = ["wideTable", "tradingSimplifiedBabyBlue"]
# other properties to attach to your journal
other_properties = ["Timeframe", "Exchange",  "Profitable", "DateCreated", "DateUpdated"]
# reference existing template charts
charts = [
  {type = "pie", name = "Performance"},
  # {type = "pie", name = "Win Ratio"},
  {type = "pie", name = "Stopped Out"},
  {type = "pie", name = "Risk Management"},
  {type = "pie", name = "Trades By Session"},
  {type = "pie", name = "Trades By Asset"}
]
# reference existing template tables or customize your own by listing the (Case Sensitive) columns you want to display
# if a column does not exist, it will still be created but with empty content
# (special characters must be doubled)
tables = [
  {type = "aggregated", name = "Aggregated View", descriptions = true},
#   {type = "custom", name = "Custom View", columns = [
#    "Symbol", "Action", "Side", "Entry Price", "Entry Date", "Realized Profit", "ROI(%)"
#  ], descriptions = false},
  {type = "detailed", name = "Detailed View", descriptions = false}
]
# if you don't want tags associated, set it as an empty list
tags =["trading", "journal", "crypto"]

[logging]
log_level = "info"
log_to_file = true
log_dir = "logs"

